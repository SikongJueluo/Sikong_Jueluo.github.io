{"title":"Keil STM32F4 标准外设库的本地环境搭建","uid":"aece1410b59afa81265317d299da61a4","slug":"Keil STM32F4 标准外设库的本地环境搭建","date":"2022-11-02T13:32:12.000Z","updated":"2023-12-22T10:46:08.489Z","comments":true,"path":"api/articles/Keil STM32F4 标准外设库的本地环境搭建.json","cover":"https://s1.ax1x.com/2022/11/02/xbEouD.jpg","content":"<h1 id=\"Keil-STM32F4-标准外设库的本地环境搭建\"><a href=\"#Keil-STM32F4-标准外设库的本地环境搭建\" class=\"headerlink\" title=\"Keil STM32F4 标准外设库的本地环境搭建\"></a>Keil STM32F4 标准外设库的本地环境搭建</h1><hr>\n<h1 id=\"一些废话\"><a href=\"#一些废话\" class=\"headerlink\" title=\"一些废话\"></a>一些废话</h1><p>怎么说，STM32的库环境搭建，是我见过最难搭建的环境了，比C语言过犹不及。你能想象花了几个小时就是为了处理环境搭建时的各种报错吗？只能说环境搭建是开发者的痛啊。</p>\n<hr>\n<h1 id=\"关于标准外设库和HAL库\"><a href=\"#关于标准外设库和HAL库\" class=\"headerlink\" title=\"关于标准外设库和HAL库\"></a>关于标准外设库和HAL库</h1><p>HAL库是近些年STM主推的库，而标准外设库是之前的库。目前而已HAL库通用性更强，能适配几乎所有STM32芯片，但标准外设库通用性更差一些，基本不太可能跨芯片使用。但HAL库的运行速度也因此比标准外设库更慢，因此目前也有不少人仍然使用标准外设库，大多教程也是基于此。然而官方已经不打算更新标准外设库了，有些新出的芯片甚至没标准外设库，因此HAL成为主流也是迟早的事。</p>\n<p>但其实HAL库也没有那么不堪，抛开运行速度，几乎其他全是优点。它有着官方配套开发工具，包括CubeMX和CubeIDE，且全部免费，可以省去很多配置环境的操作，以及更好看的UI，较好的汉化。如果使用HAL库开发，建议使用CubeMX和CubeIDE，可以省去很多麻烦。</p>\n<hr>\n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><h2 id=\"Keil5\"><a href=\"#Keil5\" class=\"headerlink\" title=\"Keil5\"></a>Keil5</h2><p>用来开发单片机的IDE，仅有部分代码补全，且UI极其丑陋，但它的编译调试和下载却又不可替代。有时候最新版不一定就好，最新版不内置ARMCC5，而标准外设库又是基于此搭建的，但恰好ARM已经不提供旧版本的ARMCC。因此建议安装旧版本，如果实在想用新版本，可以先装旧版本，再装新版本，覆盖旧版本。</p>\n<h2 id=\"标准外设库\"><a href=\"#标准外设库\" class=\"headerlink\" title=\"标准外设库\"></a>标准外设库</h2><p>可以在STM官网下载，中国官网和外网都行。</p>\n<p><img src=\"https://s2.loli.net/2022/10/25/UnPGLiApWZlC8FD.png\"></p>\n<p>选择产品</p>\n<p><img src=\"https://s2.loli.net/2022/10/25/4NUJMBRhoV1y7bz.png\"></p>\n<p>标准外设库</p>\n<p><img src=\"https://s2.loli.net/2022/10/25/y9LT6rwY2RDvVMc.png\"></p>\n<hr>\n<h1 id=\"标准外设库的环境搭建\"><a href=\"#标准外设库的环境搭建\" class=\"headerlink\" title=\"标准外设库的环境搭建\"></a>标准外设库的环境搭建</h1><h2 id=\"库函数本地化\"><a href=\"#库函数本地化\" class=\"headerlink\" title=\"库函数本地化\"></a>库函数本地化</h2><p>新建一个工程文件，并在工程文件下建立 <strong>User、Libraries、Start</strong> 文件夹。其中 <strong>Start</strong> 用于存储启动文件，<strong>Libraries</strong> 用于存储库文件，<strong>User</strong> 则用于存储用户文件（即程序源代码）。当然，你也可以根据自己的风格建立文件夹，但前提是记得文件放在哪。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/VGdvAeNiF1YPXKg.png\"></p>\n<p>同样在Keil中建立相同的文件夹。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/WRql1rOYBeo2wdp.png\"></p>\n<p>在该目录下，找到对应型号的启动文件，并拷贝到 <strong>Start</strong> 文件夹下。一般 <strong>F40x~F41x</strong> 的，一般选择 <strong>f40_41xxx</strong> 。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/jP4OewvknhGruIt.png\"></p>\n<p>同样在该目录下拷贝选中的文件到 Start 。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/NIzGefukKchPMZJ.png\"></p>\n<p>将下面两个文件拷贝至 Start 。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/82ZONSs1FTtwQY4.png\"></p>\n<p>将以下文件拷贝至 Start 。因为 F4 一般为 Cortex-4  的内核，因而选择 cm4 文件。如果为其他系列则看提示拷贝，先拷贝内核文件，编译后看报错缺啥就拷贝啥即可。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/xypm5jNBCgULGAH.png\"></p>\n<p>以上完成后，即可使用寄存器开发STM32。但库函数仍需拷贝 inc 和 src 目录下的所有文件至 Libraries 。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/JqLjcXC5whDRgAF.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/10/31/wOMU8t5auvA1egD.png\"></p>\n<p>将以下文件拷贝至 User 。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/BKlpIDq6eOv3TC8.png\"></p>\n<h2 id=\"Keil-的配置\"><a href=\"#Keil-的配置\" class=\"headerlink\" title=\"Keil 的配置\"></a>Keil 的配置</h2><p>依次将文件添加进 Keil 的工程。</p>\n<p><img src=\"https://s2.loli.net/2022/10/31/Aye2F58w9uogcMd.png\"></p>\n<p>打开工程设置。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/OfyuCdvR58E7K3o.png\"></p>\n<p>生成器换为ARMCC5。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/yMXd8AYBFQeJ96t.png\"></p>\n<p>勾选才 c99 模式。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/qUTNvgjbiLa3Z5m.png\"></p>\n<p>如果是ARMCC6，这显示如下界面。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/RyWqCM82tbwcxOr.png\"></p>\n<p>打开 stm32f4xx.h ，根据提示选择相应的数据添加到宏定义中。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/2mNbqYwCULv4fyg.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/11/01/1fuJdqijwEg8Q6l.png\"></p>\n<p>同样在 stm32f4xx.h ，找到并添加库函数的宏定义。两个参数之间用 <code>,</code> 隔开。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/vUGlaItSHWmjOVd.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/11/01/mKfguLyhp1TaDZi.png\"></p>\n<p>在 Keil 中添加包含目录，不然 Keil 只会从安装目录寻找文件，他就找不到本地的文件。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/9SANBUpat7wXkqC.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/11/01/JU7Cg9YnHWf6E8i.gif\"></p>\n<p>在 User 下建立一个 main.c 文件，注意路径设置，默认在User外，与工程文件同目录。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/f8Sj46QEaobYD3t.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/11/01/JRTwAmifP3hzcsB.png\"></p>\n<p>编写基本的代码。注意最后一行空行，否则可能无法编译。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">stm32f4xx.h</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">                  </span><span style=\"color: #676E95; font-style: italic\">// Device header</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">void</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>如果你是F407，现在编译，必然报错。报错说是函数未定义，但其实是板子不同，引用的 .h 头文件不同，导致函数未定义。这个文件主要是给支持<strong>动态SDRAM</strong>的板子（<strong>F429</strong>、<strong>F7,H7系列</strong>等）用的。直接在工程中删去相应的 .h 和 .c 文件即可。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/M9G6Lc7CoxtBsji.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/11/01/kt478h1d5fTj6nN.png\"></p>\n<p>还有一个报错，其实是为了消除报错贸然拷贝官方 main.h 文件所造成的。</p>\n<p><img src=\"https://s2.loli.net/2022/11/01/7azFZo53PuwGSi1.png\"></p>\n<p>可以将官方案例中的 main.c 文件相关的函数复制到main.c中。但我比较推荐直接复制到stm32f4xx_it.c 的开头中，然后再删除 main.h 文件，以防跟自己写的函数搞乱。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> __IO </span><span style=\"color: #C792EA\">uint32_t</span><span style=\"color: #BABED8\"> uwTimingDelay</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">TimingDelay_Decrement</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">void</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F07178\">uwTimingDelay </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">0x00</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    uwTimingDelay</span><span style=\"color: #89DDFF\">--;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>至此，标准外设库的环境搭建就圆满完成了。接下来就可以继续嵌入式头秃之旅了。</p>\n","feature":true,"text":"Keil STM32F4 标准外设库的本地环境搭建 一些废话怎么说，STM32的库环境搭建，是我见过最难搭建的环境了，比C语言过犹不及。你能想象花了几个小时就是...","permalink":"/post/Keil STM32F4 标准外设库的本地环境搭建","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"嵌入式","slug":"嵌入式","count":1,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"Keil","slug":"Keil","count":1,"path":"api/tags/Keil.json"},{"name":"教程","slug":"教程","count":3,"path":"api/tags/教程.json"},{"name":"嵌入式","slug":"嵌入式","count":1,"path":"api/tags/嵌入式.json"},{"name":"STM32","slug":"STM32","count":1,"path":"api/tags/STM32.json"},{"name":"环境搭建","slug":"环境搭建","count":1,"path":"api/tags/环境搭建.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Keil-STM32F4-%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">Keil STM32F4 标准外设库的本地环境搭建</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%BA%9F%E8%AF%9D\"><span class=\"toc-text\">一些废话</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E5%92%8CHAL%E5%BA%93\"><span class=\"toc-text\">关于标准外设库和HAL库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\"><span class=\"toc-text\">前期准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Keil5\"><span class=\"toc-text\">Keil5</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93\"><span class=\"toc-text\">标准外设库</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E5%A4%96%E8%AE%BE%E5%BA%93%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">标准外设库的环境搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%93%E5%87%BD%E6%95%B0%E6%9C%AC%E5%9C%B0%E5%8C%96\"><span class=\"toc-text\">库函数本地化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Keil-%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Keil 的配置</span></a></li></ol></li></ol>","author":{"name":"司空绝洛","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6IgyQ.jpg","link":"/","description":"浮生若梦，为欢几何","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言基础学习笔记 --- 持续更新中...","uid":"768ab94bc5574df04ac4541ddb03daf1","slug":"C语言基础学习笔记","date":"2023-04-29T13:16:43.000Z","updated":"2023-12-22T10:46:08.492Z","comments":true,"path":"api/articles/C语言基础学习笔记.json","cover":null,"text":"序言main函数main函数的基本信息函数顾名思义其实与数学的函数类似，只不过C语言的函数是更为广义的函数，表示为一种处理问题的方法。下面是函数的常见形式，且下...","permalink":"/post/C语言基础学习笔记","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"C语言","slug":"C语言","count":1,"path":"api/categories/C语言.json"}],"tags":[{"name":"C语言","slug":"C语言","count":1,"path":"api/tags/C语言.json"},{"name":"总结","slug":"总结","count":1,"path":"api/tags/总结.json"}],"author":{"name":"司空绝洛","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6IgyQ.jpg","link":"/","description":"浮生若梦，为欢几何","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Windows + Deepin 单硬盘双系统的安装与使用","uid":"35de80971299a8a8696090efdf015d76","slug":"Windows-Deepin-单硬盘双系统的安装与使用","date":"2022-10-04T11:03:09.000Z","updated":"2023-12-22T10:46:08.494Z","comments":true,"path":"api/articles/Windows-Deepin-单硬盘双系统的安装与使用.json","cover":"https://s1.ax1x.com/2022/10/04/xluZge.jpg","text":"Windows + Deepin 单硬盘双系统的安装与使用说实话我受够了Windows的环境搭建，想要精简就极度繁琐，想要方便就得用宇宙IDE，占十几二十多GB...","permalink":"/post/Windows-Deepin-单硬盘双系统的安装与使用","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Deepin","slug":"Deepin","count":1,"path":"api/tags/Deepin.json"},{"name":"Window","slug":"Window","count":1,"path":"api/tags/Window.json"},{"name":"系统","slug":"系统","count":1,"path":"api/tags/系统.json"},{"name":"双系统","slug":"双系统","count":1,"path":"api/tags/双系统.json"}],"author":{"name":"司空绝洛","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/03/28/pp6IgyQ.jpg","link":"/","description":"浮生若梦，为欢几何","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}